user  nobody;
worker_processes  8;
worker_cpu_affinity 00000001 00000010 00000100 00001000 00010000 00100000 01000000 10000000;

error_log  logs/error.log  info;
pid        logs/nginx.pid;

events {
    use epoll;
    multi_accept on;
    worker_connections 51200;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    log_format main '{ "@timestamp": "$time_iso8601", '
                       '"remote_addr": "$remote_addr",'
                       '"costime": $request_time,'
                       '"realtime": "$upstream_response_time",'
                       '"status": $status,'
                       '"x_forwarded": "$http_x_forwarded_for",'
                       '"referer": "$http_referer",'
                       '"method": "$request_method",'
                       '"url": "$uri",'
                       '"args": "$args",'
                       '"upstr_addr": "$upstream_addr",'
                       '"bytes":$body_bytes_sent,'
                       '"agent": "$http_user_agent" }';

    access_log  logs/access.log  main;
    
    #网络性能优化
    server_tokens off;
    sendfile      on; #开启高效文件传输模式
    tcp_nopush on; #防止网络阻塞
    tcp_nodelay on; #防止网络阻塞

    #改善网站的性能：减少资源占用，提高访问速度设置
    fastcgi_connect_timeout 300;
    fastcgi_send_timeout 300;
    fastcgi_read_timeout 300;
    fastcgi_buffer_size 2048k;
    fastcgi_buffers 16 256k;
    fastcgi_busy_buffers_size 2048k;
    fastcgi_temp_file_write_size 2048k;

    #设定请求缓冲区
    keepalive_timeout  70;
    client_header_buffer_size 1024k;  #接收header的缓冲区大小
    large_client_header_buffers 4 1024k; #设定请求缓
    client_body_buffer_size 1024k; #客户端包体缓冲区大小
    client_header_timeout     60;
    client_body_timeout 60;
    send_timeout        60;
    client_max_body_size 30m; #设置客户端能够上传的文件大小

    gzip  on;
    gzip_proxied any;
    gzip_min_length 2000; #最小压缩文件大小
    gzip_comp_level 2; #压缩比率1--9
    gzip_buffers 4 1024k; #压缩缓冲区
    gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;
    gzip_vary on; #前端服务缓存压缩
    output_buffers 4 1024k; #输出缓冲区
    postpone_output 5460; #输出缓冲区
    charset utf-8;
 
    proxy_cache_path /usr/local/openresty/nginx/proxy_cache levels=1:2 keys_zone=ghcache:200m inactive=10d max_size=200m;
    proxy_cache_lock on;
    proxy_cache_use_stale error timeout invalid_header updating http_500 http_502 http_503 http_504;
    proxy_cache_methods GET POST;
    lua_shared_dict limit 50m;
    lua_package_path '$prefixconf/app/?.lua;/usr/local/openresty/nginx/waf/?.lua;/usr/local/openresty/lualib/?.lua;';
    init_by_lua_file "/usr/local/openresty/nginx/waf/init.lua";
    access_by_lua_file "/usr/local/openresty/nginx/waf/access.lua";


    #理财uc负载
    upstream bf_uc{
      server 172.17.2.124:7061 max_fails=10 fail_timeout=10s;
      server 172.17.2.125:7061 max_fails=10 fail_timeout=10s;
    }


    server {
        listen       80;
        server_name  localhost;

	more_clear_headers 'Server';
	more_set_headers 'Access-Control-Allow-Origin: $http_origin';
        more_set_headers 'Access-Control-Allow-Methods: GET, POST, OPTIONS';
        more_set_headers 'Access-Control-Allow-Headers: X-Requested-With,Content-Type';
        more_set_headers 'Access-Control-Allow-Credentials: true';

        location / {
            proxy_read_timeout 300;
            proxy_connect_timeout 300;
            proxy_set_header  X-Real-IP  $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Host $host;
            proxy_redirect off;
	    access_log off;
            #root /usr/local/openresty/web/bfpc/pages;
	    root /usr/local/openresty/web/bfpc/dist/pages;
            index  index.html index.htm;
        }

        #error_page  404 500 502 503 504  /50x.html;
        #location = /50x.html {
        #    root   html;
        #}
        if ($http_user_agent ~ ApacheBench|WebBench|Jmeter|must-revalidate){
                return 403;
        }

        if ($http_x_forwarded_for ~ 110.87.23.245|60.180.7.150){
             return 403;
        }
        error_page 596 = @fallback;
        location @fallback {
            charset  utf-8;
            default_type 'application/json';
            echo '{"errorCode":40004, "errorMessage":"系统维护中，请稍候..."}';
            root   html;
        }
	include app/*.conf;
        include static/*.conf;
        
    }

    server {
	listen 8443 default_server;
	server_name 8.baofeng.com;
	return 301 https://$host$request_uri;
    }
}